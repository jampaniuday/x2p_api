#!/bin/ksh 
# Copyright 2012 XPRESS2PEOPLE
# File                   : oscmd.lib
# Created on             : 2012/02/22
# Family                 : OS 
# Purpose                : This file contains essentials generic functions to get informations about the state of the system.
# Developpers            :
#   Benoit Garcia can be reached at <benoit.garcia@x2p.fr>
#   Julien Alarcon can be reached at <julien.alarcon@x2p.fr>
# History                :
#  2012/02/22 (J. Alarcon) Initial version.

# 1) Function               : load_custom_oslib 
# 1) Purpose                : Load the library containing custom functions depending of the current OS.
# 1) Notes		    : $API_OS must be set.
# 1) Version                : 1.0
# 1) Syntax                 : chk_availablespace
# 1) Optionals Parameters   : Nothing
# 1) Mandatories Parameters : Nothing
# 1) Example 1              : load_custom_oslib 
# 1) Return                 : 0=Library loaded, 1=No library for $API_OS, otherwise return code of initapi.
# 1) History                :
#  2012/02/23 (J. Alarcon) Initial version.
function load_custom_oslib {
case ${API_OS} in
	"aix")
		. initapi aix
		;;
	"linux")
		. initapi lin
		;;
	*)
		echo "Error, OS library not existing for OS : ${API_OS}."
		return 1
		;;
esac
return $?
}
# load_custom_oslib end

# 2) Function               : chk_availablespace
# 2) Purpose                : Verify that there is enough disk space in the specified directory.
# 2) Notes                  : You must specify a size of space memory wanted either in MB or in %.
# 2) Version                : 1.0
# 2) Syntax                 : chk_availablespace <directory> <memory space>
# 2) Optionals Parameters   : Nothing
# 2) Mandatories Parameters : <directory> and <memory space in MB or in %>
# 2) Example 1              : chk_availablespace /home/oracle 100MB
# 2) Example 2              : chk_availablespace /etc 20%
# 2) Return                 : 0=Sufficient space, 1=Miss space, 2=No unity expressed for the size of space memory wanted or 3=No existing function for OS.
# 2) History                :
#  2012/02/22 (J. Alarcon) Initial version.
function chk_availablespace {
	echo "Error, function chk_availablespace not existing for OS : ${API_OS}."
	return 3
}
# chk_availablespace end

# 4) Function               : ctl_service
# 4) Purpose                : Perform an action (start, stop, status) for a specific service.
# 4) Version                : 1.0
# 4) Syntax                 : ctl_service <service> <action>
# 4) Notes                  : Need to be root.
# 4) Optionals Parameters   : Nothing
# 4) Mandatories Parameters : <service> (name of the service) and <action> [stop|start|status]
# 4) Example 1              : ctl_service sshd status
# 4) History                :
#  2012/02/27 (J. Alarcon) Initial version.
function ctl_service {
	echo "Error, function ctl_service not existing for OS : ${API_OS}."
	return 3
}
# ctl_service end

# 3) Function               : fs_mount
# 3) Purpose                : Mount a file system on a specified mount point.
# 3) Version                : 1.1
# 3) Syntax                 : fs_mount <device> <mount point>
# 3) Notes                  : Need to be root.
# 3) Optionals Parameters   : Nothing
# 3) Mandatories Parameters : <device> (path to the device to mount) and <mount moint> (where to mount)
# 3) Example 1              : fs_mount /dev/cdrom /mnt
function fs_mount {
	if [[ ! -e $1 ]]; then	# Check if device exists
		return 1
	fi
	if [[ ! -d $2 ]]; then	# Check if mount point exists
		return 2
	fi
	if [[ "/" = $2 ]]; then	# Do not try to mount in /
		return 3
	fi
	
	mount $1 $2 # Mount

	return $?
}
# fs_mount end

# 5) Function               : fs_umount
# 5) Purpose                : Unmount a file system from a specified mount point.
# 5) Version                : 1.1
# 5) Syntax                 : fs_umount <mount point>
# 5) Notes                  : Need to be root.
# 5) Optionals Parameters   : Nothing
# 5) Mandatories Parameters : <mount moint> (where to mount)
# 5) Example 1              : fs_umount /mnt
function fs_umount {
	if [[ ! -d $1 ]]; then	# Check if mount point exists
		return 2
	fi
	if [[ "/" = $1 ]]; then	# Do not try to unmount in /
		return 3
	fi
	
	umount $1 # Mount
	return $?
}
# fs_umount end

# 6) Function               : kernel_mgmt 
# 6) Purpose                : Show or set a kernel setting.
# 6) Version                : 1.0
# 6) Syntax                 : kernel_mgmt <setting> [new_value] 
# 6) Notes                  : Need to be root.
# 6) Optionals Parameters   : [new_value] (the new value to set)
# 6) Mandatories Parameters : <setting> (name of the setting to set or show)
# 6) Example 1              : kernel_mgmt "crypto.fips_enabled" "1" (Set crypto.fips_enabled to value 1)
# 6) Example 2		    : kernel_mgmt "crypto.fips_enabled" (Show actual value of crypto.fips_enabled setting)
# 6) Example 3		    : kernel_mgmt "all" (Show all the kernel settings)
function kernel_mgmt {
        echo "Error, function kernel_mgmt not existing for OS : ${API_OS}."
        return 3
}
# kernel_mgmt end

# Include the current OS library
load_custom_oslib
