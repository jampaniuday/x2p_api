#!/bin/ksh
# Copyright 2012 XPRESS2PEOPLE
# File                   : oradb.lib
# Created on             : 2012/02/22
# Family                 : ORACLE
# Purpose 1              : This file contains essentials functions for the interraction with Oracle databases.
#######

## Variable declaration ##
###############################################
if [[ -z ${APIHOME} ]];
then
 echo "*************************************************************"
 echo "WARNING! api.conf have not been source\nPlease source it : . API_PATH/conf/api.conf"
 echo "*************************************************************"
fi
###############################################
. ${APIHOME}/conf/oracle.conf

## Function declaration ##

# 1) Function               : set_ora_env
# 1) Purpose                : Set the Oracle environnement for a specified SID.
# 1) Notes                  : /etc/oratab must exist and must be filled.
# 1) Version                : 1.0
# 1) Syntax                 : set_ora_env <SID>
# 1) Optionals Parameters   : Nothing
# 1) Mandatories Parameters : <SID : System ID>
# 1) Example                : set_ora_env 18
# 1) Return                 : 1 in case of error. 0 otherwise.
# 1) History                :
#   2009/07/16 (B. Garcia) Initial version from oracomlib.fnc by S. Ouellet.
set_ora_env() {
  typeset -u $1 # SET SID IN UPPERCASE
  if [[ `egrep -i "^${1}:" /etc/oratab | wc -l` -ne 1 ]]
  then
   return 1 # SID NOT FOUND IN THE ORATAB
  fi
  export ORACLE_SID=$1
  export ORACLE_HOME=`awk -F: "/^${ORACLE_SID}:/ {print \\$2; exit}" /etc/oratab 2>/dev/null`
}
# set_ora_env end

# 2) Function               : run_ora_sql
# 2) Purpose                : run an sql query as a specified user.
# 2) Notes                  : ORACLE_HOME & ORACLE_SID must be set.
# 2) Version                : 1.0
# 2) Syntax                 : run_ora_sql <user> <password> <sql_query>
# 2) Optionals Parameters   : Nothing
# 2) Mandatories Parameters : <user> <password> and <sql_query>
# 2) Example                : run_ora_sqlscript root admin "SELECT * FROM matable"
# 2) Return                 : 0 if the query succeed; sqlplus return code otherwise.
# 2) History                :
#   2009/07/16 (B. Garcia) Initial version from oracomlib.fnc by S. Ouellet.
run_ora_sql() {
  ${ORACLE_HOME}/bin/sqlplus -S /nolog<<EOS
connect ${1}/${2}
set pages 0
set lines 200
set head OFF
ttitle off
btitle off
WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT
${3};
exit
EOS
  return $?
}
# run_ora_sqlscript end

# 3) Function               : run_ora_script
# 3) Purpose                : run an sql script.
# 3) Notes                  : ORACLE_HOME & ORACLE_SID must be set.
# 3) Version                : 1.0
# 3) Syntax                 : run_ora_script <script>
# 3) Optionals Parameters   : Nothing
# 3) Mandatories Parameters : <script>
# 3) Example                : run_ora_script "/home/oracle/start_db.sql"
# 3) Return                 : 0 if the query succeed; sqlplus return code otherwise.
# 3) History                :
#   2012/02/27 (J. Alarcon) Initial version.
run_ora_script() {
  ${ORACLE_HOME}/bin/sqlplus -S /nolog<<EOS
@${1};
EOS
  return $?
}
# run_ora_script end

# 4) Function               : run_ora_sqldba
# 4) Purpose                : run an sql query as sysdba.
# 4) Notes                  : ORACLE_HOME & ORACLE_SID must be set.
# 4) Version                : 1.0
# 4) Syntax                 : run_ora_sqldba <sql_query>
# 4) Optionals Parameters   : Nothing
# 4) Mandatories Parameters : <sql_query>
# 4) Example                : run_ora_sqldba "SELECT * FROM matable"
# 4) Return                 : 0 if the query succeed; sqlplus return code otherwise.
# 4) History                :
#   2009/07/16 (B. Garcia) Initial version from oracomlib.fnc by S. Ouellet.
run_ora_sqldba() {
  ${ORACLE_HOME}/bin/sqlplus -S /nolog<<EOS
connect / as sysdba
set pages 0
set lines 200
set head OFF
ttitle off
btitle off
WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT
${1};
exit
EOS
  return $?
}
# run_ora_sqlscriptdba end

# 5) Function               : get_ora_oh
# 5) Purpose                : Get the Oracle Home from the /etc/oratab from the /etc/oratab
# 5) Notes                  :
# 5) Version                : 1.0
# 5) Syntax                 : get_ora_oh [SID]
# 5) Optionals Parameters   : [SID]
# 5) Mandatories Parameters : None
# 5) Example                : get_ora_oh
# 5) Return                 : 0=ok,1=/etc/oratab file not found
# 5) History                :
#   2010/10/18 (S. Ouellet) Initial version by S. Ouellet.
get_ora_oh() {
 if [[ -f /etc/oratab ]]
 then
  if [[ -n ${1} ]] # If a SID is specified as arguments
  then
   egrep -v "^#" /etc/oratab | egrep -i "^${1}:" | awk -F":" '{ print $2 }'
  else # Print all oh from the /etc/oratab
   egrep -v "^#" /etc/oratab | egrep -i "^[A-Z]" | awk -F":" '{ print $2 }'
  fi
  return 0
 else
  echo "No /etc/oratab file"
  return 1
 fi
}
# get_ora_oh end

# 6) Function               : get_ora_activesidlist
# 6) Purpose                : List only active SID from the /etc/oratab
# 6) Notes                  :
# 6) Version                : 1.0
# 6) Syntax                 : get_ora_activesidlist
# 6) Optionals Parameters   : None
# 6) Mandatories Parameters : None
# 6) Example                : get_ora_activesidlist
# 6) Return                 : 0=ok,1=/etc/oratab file not found
# 6) History                :
#   2010/10/18 (S. Ouellet) Initial version by S. Ouellet.
get_ora_activesidlist() {
 if [[ -f /etc/oratab ]]
 then
  for _oratab in `egrep -v "^#" /etc/oratab | egrep -i "^[A-Z]"`
  do
   if [[ `echo ${_oratab} | awk -F":" '{ print $3 }'` == "Y" ]]
   then
    echo ${_oratab} | awk -F":" '{ print $1 }'
   fi
  done
  return 0
 else
  echo "No /etc/oratab file"
  return 1
 fi
}
# get_ora_activesidlist end

# 7) Function               : start_ora_listener
# 7) Purpose                : Start the Oracle listener
# 7) Notes                  : the variable LISTENER_HOME from oracle.conf must be set correctly. If not, the first oh entry from the oratab will be use.
# 7) Version                : 1.0
# 7) Syntax                 : start_ora_listener
# 7) Optionals Parameters   : Nothing
# 7) Mandatories Parameters : Nothing
# 7) Example                : start_ora_listener
# 7) Return                 : 1 in case of error. 0 for a successfull start.
start_ora_listener() {
 if [[ -z $LISTENER_HOME ]]
 then # LISTENER_HOME is not set, set the default
  LISTENER_HOME=$(get_ora_oh `get_ora_activesidlist | head -1`)
 fi
 export ORACLE_HOME=${LISTENER_HOME}
 ${ORACLE_HOME}/bin/lsnrctl start
 return $?
}
# start_ora_listener end

# 8) Function               : stop_ora_listener
# 8) Purpose                : Stop the Oracle listener
# 8) Notes                  : the variable LISTENER_HOME from oracle.conf must be set correctly. If not, the first oh entry from the oratab will be use.
# 8) Version                : 1.0
# 8) Syntax                 : stop_ora_listener
# 8) Optionals Parameters   : Nothing
# 8) Mandatories Parameters : Nothing
# 8) Example                : stop_ora_listener
# 8) Return                 : 1 in case of error. 0 for a successfull start.
stop_ora_listener() {
 if [[ -z $LISTENER_HOME ]]
 then # LISTENER_HOME is not set, set the default
  LISTENER_HOME=$(get_ora_oh `get_ora_activesidlist | head -1`)
 fi
 export ORACLE_HOME=${LISTENER_HOME}
 ${ORACLE_HOME}/bin/lsnrctl stop
 return $?
}
# stop_ora_listener end

# 9) Function               : ctl_ora_agent
# 9) Purpose                : Control the Oracle agent. start, stop, etc..
# 9) Notes                  : the variable AGENT_HOME from oracle.conf must be set correctly. If not, the first oh entry from the oratab will be use.
# 9) Version                : 1.0
# 9) Syntax                 : ctl_ora_agent <action>
# 9) Optionals Parameters   : Nothing
# 9) Mandatories Parameters : <action>
# 9) Example 1              : ctl_ora_agent start
# 9) Example 2              : ctl_ora_agent stop
# 9) Return                 : 1 in case of error. 0 for a successfull start.
ctl_ora_agent() {
 if [[ -z $AGENT_HOME ]]
 then # LISTENER_HOME is not set, set the default
  LISTENER_HOME=$(get_ora_oh `get_ora_activesidlist | head -1`)
 fi
 export ORACLE_HOME=${AGENT_HOME}
 ${ORACLE_HOME}/bin/emctl ${1} agent
 return $?
}
# ctl_ora_agent end

## BACKUP FUNCTIONS ##

# 10) Function               : run_ora_rmanscript
# 10) Purpose                : run an rman script.
# 10) Notes                  : ORACLE_HOME & ORACLE_SID must be set. User must be member of the dba group.The file ${APIHOME}/conf/connect_catalog.conf must exists and be completed if USE_RMAN_CATALOG is YES.
# 10) Version                : 1.0
# 10) Syntax                 : run_ora_rmanscript <script>
# 10) Optionals Parameters   : Nothing
# 10) Mandatories Parameters : <script>
# 10) Example                : run_ora_rmanscript script.rman
# 10) Return                 : 0 if the query succeed; rman return code otherwise.
# 10) History                :
#   2012/02/22 (J. Alarcon) New version from orabck.lib. 
run_ora_rmanscript() {
  if [[ -z $1 ]]; then    # check if argument has been given.
    print_api_stdoutd "Error: Bad usage of run_ora_rmanscript (no script given)"
    return -1
  else
    rman_script="${APIHOME}/resources/rman/$1"
    if [[ ! -f $rman_script ]]; then    # check if specified script exists.
      print_api_stdoutd "Error: Bad usage of run_ora_rmanscript (script $rman_script doesn't exist)"
      return -2
    else
      print_api_stdoutd "Will run $rman_script on database ${ORACLE_SID}"
      # run the script, with recovery catalog connection if needed.
 	if [ "${USE_RMAN_CATALOG}" == "YES" ] ; then
        ${ORACLE_HOME}/bin/rman TARGET /<<EOS
@${APIHOME}/conf/connect_catalog.rman
RESYNC CATALOG;
@$rman_script
EOS
      else
        ${ORACLE_HOME}/bin/rman TARGET /<<EOS
@$rman_script
EOS
      fi
      return $?
    fi
  fi
}
# run_ora_rmanscript end

# 11) Function               : get_rman_backuppath 
# 11) Purpose                : Get the main rman backup path from RMAN configuration and set the BACKUP_PATH variable.
# 11) Notes                  : ORACLE_HOME & ORACLE_SID must be set. User must be member of the dba group. The file ${APIHOME}/conf/connect_catalog.conf must exists and be completed if USE_RMAN_CATALOG is YES.
# 11) Version                : 1.0
# 11) Syntax                 : get_rman_backuppath 
# 11) Optionals Parameters   : Nothing
# 11) Mandatories Parameters : Nothing 
# 11) Example                : get_rman_backuppath
# 11) Return                 : 0 if the query succeed; rman return code otherwise.
# 11) History                :
#   2011/11/28 (J. Alarcon) Initial version.
get_rman_backuppath() {
      
      # RMAN Query
      query="SHOW CHANNEL FOR DEVICE TYPE DISK;"
      bck_path=
 
      # get the path, with recovery catalog connection if needed.
      if [[ "${USE_RMAN_CATALOG}" == "YES" ]] ; then
        bck_path=`${ORACLE_HOME}/bin/rman TARGET /<<EOS
@${APIHOME}/scripts/rman/connect_catalog.rman
${query}
EXIT;
EOS`
      else
        bck_path=`${ORACLE_HOME}/bin/rman TARGET /<<EOS
${query}
EXIT;
EOS`
      fi

      bck_path=`echo "$bck_path" | grep "CONFIGURE" | head -n1`

      bck_path=`echo "$bck_path" | cut -d "'" -f 2`

      BACKUP_PATH=

      set -A temp_path `echo "$bck_path" | awk -F'/' '{for(i=1; i<=NF; i++){printf("%s ", $i)}}'`
      i=0
      while : ; do
	if [[ "${temp_path[$i+1]}" == "" ]]  ; then
		break
	else
		BACKUP_PATH="$BACKUP_PATH/${temp_path[$i]}"
	fi
	i=$i+1
      done

      if [[ "$bck_path" == "" ]] ; then
	return -1
      else
	export BACKUP_PATH
      fi
      
      return $?
}

# 12) Function               : export_datapump 
# 12) Purpose                : Make an oracle datapump export according to the parameters.
# 12) Notes                  : ORACLE_HOME & ORACLE_SID must be set. User must be member of the dba group.
# 12) Version                : 1.0
# 12) Syntax                 : export_datapump <type> <name[,name][...]> 
# 12) Optionals Parameters   : Nothing
# 12) Mandatories Parameters : <type> (FULL | TABLESPACE | SCHEMA) <name> 
# 12) Example 1              : export_datapump "SCHEMA" "USERS,TEST"
# 12) Example 2		     : export_datapump "TABLESPACE" "SYSTEM"
# 12) Example 3		     : export_datapump "FULL"
# 12) Return                 : 0 if the query succeed; sqlplus return code otherwise.
# 12) History                :
#   2011/12/04 (J. Alarcon) Initial version.
export_datapump() {
    # Upper case
    typeset -u dp_type
    typeset -u dp_name   

    # Check the parameters
    if [[ -z $1 ]] ; then
	print_api_stdoutd "Error: Bad usage of export_datapump (no argument given)"
 	return -1
    fi

    dp_type="$1"
    if [[ "$dp_type" != "FULL" ]] && [[ -z $2 ]] ; then
	print_api_stdoutd "Error: Bad usage of export_datapump (second argument not given)"
        return -1
    fi

    dp_name="$2"

    # Check the directories
    if [[ ! -d $DPDUMP_PATH ]]; then
    	mkdir -p $DPDUMP_PATH
    	if [[ $? -ne 0 ]]; then
      		print_api_stdoutd "Error: Directory ${DPDUMP_PATH} doesn't exist and can't be created."
    		return -1
	fi
    fi   
    
    if [[ ! -d $DPDUMP_LOGPATH ]]; then
        mkdir -p $DPDUMP_LOGPATH
        if [[ $? -ne 0 ]]; then
                print_api_stdoutd "Error: Directory ${DPDUMP_LOGPATH} doesn't exist and can't be created."
                return -1
        fi
    fi
    
    # Job Name, files names, names
    dp_timestamp=`date '+%H%M%S_%d%m%y'`
    dp_jobname="DP_EXPORT_""$dp_type""_""$dp_timestamp"
    dpdump_file="EXPORT_""$dp_type"
    dplog_file="EXPORT_""$dp_type"
    dp_sqlnames=

    if [[ "$dp_type" != "FULL" ]] ; then
    	set -A dp_names_array `echo "$dp_name" | awk -F',' '{for(i=1; i<=NF; i++){printf("%s ", $i)}}'`
	i=0
	while : ; do 
		if [[ "${dp_names_array[$i]}" == "" ]] ; then
			break
		fi
		if [[ "$dp_sqlnames" != "" ]] ; then
			dp_sqlnames="$dp_sqlnames,"
		fi
		dpdump_file="$dpdump_file""_""${dp_names_array[$i]}"
		dplog_file="$dplog_file""_""${dp_names_array[$i]}"
		dp_sqlnames="$dp_sqlnames${dp_names_array[$i]}"
		i=$i+1
	done
    fi

    dpdump_file="$dpdump_file""_$dp_timestamp.dmp"
    dplog_file="$dplog_file""_$dp_timestamp.log"
    
    # Construct the sql query according to the parameters.
    dp_query="SET SERVEROUTPUT OFF
		DECLARE
		v_dummy NUMBER;
		BEGIN
		SELECT 1 INTO v_dummy FROM DBA_DIRECTORIES WHERE \"DIRECTORY_NAME\"='$DATAPUMP_DUMPDIR';
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
		EXECUTE IMMEDIATE 'CREATE DIRECTORY \"$DATAPUMP_DUMPDIR\" AS ''$DPDUMP_PATH''';
		END;
		/
		DECLARE
                v_dummy NUMBER;
                BEGIN
		SELECT 1 INTO v_dummy FROM DBA_DIRECTORIES WHERE \"DIRECTORY_NAME\"='$DATAPUMP_LOGDIR';
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                EXECUTE IMMEDIATE 'CREATE DIRECTORY \"$DATAPUMP_LOGDIR\" AS ''$DPDUMP_LOGPATH''';
                END;
                /
		SET SERVEROUTPUT OFF"
	
	# Notes : The "SET SERVEROUTPUT OFF" at the end ensures the compatibility with run_ora_sqldba function

	run_ora_sqldba "$dp_query"

	if [[ "$?" != "0" ]] ; then
		return $?
	fi

	dp_cmd="DUMPFILE=$DATAPUMP_DUMPDIR:$dpdump_file LOGFILE=$DATAPUMP_LOGDIR:$dplog_file"		

     case "$dp_type" in
	"FULL") dp_cmd="$dp_cmd FULL=Y" ;;
	"TABLESPACE") dp_cmd="$dp_cmd FULL=N TABLESPACES=$dp_sqlnames" ;;
	"SCHEMA") dp_cmd="$dp_cmd FULL=N SCHEMAS=$dp_sqlnames" ;;
	*) print_api_stdoutd "Error: Bad argument";return -1 ;;
     esac 

     # Add custom arguments if exists
     dp_cmd="$dp_cmd $DATAPUMP_PARAMETERS"

    print_api_stdoutd "Dump File : $DPDUMP_PATH/$dpdump_file"
    print_api_stdoutd "Log File  : $DPDUMP_LOGPATH/$dplog_file"
    print_api_stdoutd "Parameters: $dp_cmd"

    ${ORACLE_HOME}/bin/expdp userid=\"/ as sysdba\" $dp_cmd

    return $?
}
